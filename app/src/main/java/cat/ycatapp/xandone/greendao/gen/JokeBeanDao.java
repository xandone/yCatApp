package cat.ycatapp.xandone.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cat.ycatapp.xandone.model.bean.JokeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOKE_BEAN".
*/
public class JokeBeanDao extends AbstractDao<JokeBean, Long> {

    public static final String TABLENAME = "JOKE_BEAN";

    /**
     * Properties of entity JokeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property JokeDaoId = new Property(0, Long.class, "jokeDaoId", true, "_id");
        public final static Property Joke_id = new Property(1, String.class, "joke_id", false, "JOKE_ID");
        public final static Property Joke_user_id = new Property(2, String.class, "joke_user_id", false, "JOKE_USER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Post_time = new Property(5, long.class, "post_time", false, "POST_TIME");
        public final static Property Article_like_count = new Property(6, int.class, "article_like_count", false, "ARTICLE_LIKE_COUNT");
        public final static Property Article_comment_count = new Property(7, int.class, "article_comment_count", false, "ARTICLE_COMMENT_COUNT");
        public final static Property Joke_user_nick = new Property(8, String.class, "joke_user_nick", false, "JOKE_USER_NICK");
        public final static Property Joke_user_icon = new Property(9, String.class, "joke_user_icon", false, "JOKE_USER_ICON");
    }


    public JokeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public JokeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOKE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: jokeDaoId
                "\"JOKE_ID\" TEXT," + // 1: joke_id
                "\"JOKE_USER_ID\" TEXT," + // 2: joke_user_id
                "\"TITLE\" TEXT," + // 3: title
                "\"CONTENT\" TEXT," + // 4: content
                "\"POST_TIME\" INTEGER NOT NULL ," + // 5: post_time
                "\"ARTICLE_LIKE_COUNT\" INTEGER NOT NULL ," + // 6: article_like_count
                "\"ARTICLE_COMMENT_COUNT\" INTEGER NOT NULL ," + // 7: article_comment_count
                "\"JOKE_USER_NICK\" TEXT," + // 8: joke_user_nick
                "\"JOKE_USER_ICON\" TEXT);"); // 9: joke_user_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOKE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JokeBean entity) {
        stmt.clearBindings();
 
        Long jokeDaoId = entity.getJokeDaoId();
        if (jokeDaoId != null) {
            stmt.bindLong(1, jokeDaoId);
        }
 
        String joke_id = entity.getJoke_id();
        if (joke_id != null) {
            stmt.bindString(2, joke_id);
        }
 
        String joke_user_id = entity.getJoke_user_id();
        if (joke_user_id != null) {
            stmt.bindString(3, joke_user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getPost_time());
        stmt.bindLong(7, entity.getArticle_like_count());
        stmt.bindLong(8, entity.getArticle_comment_count());
 
        String joke_user_nick = entity.getJoke_user_nick();
        if (joke_user_nick != null) {
            stmt.bindString(9, joke_user_nick);
        }
 
        String joke_user_icon = entity.getJoke_user_icon();
        if (joke_user_icon != null) {
            stmt.bindString(10, joke_user_icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JokeBean entity) {
        stmt.clearBindings();
 
        Long jokeDaoId = entity.getJokeDaoId();
        if (jokeDaoId != null) {
            stmt.bindLong(1, jokeDaoId);
        }
 
        String joke_id = entity.getJoke_id();
        if (joke_id != null) {
            stmt.bindString(2, joke_id);
        }
 
        String joke_user_id = entity.getJoke_user_id();
        if (joke_user_id != null) {
            stmt.bindString(3, joke_user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getPost_time());
        stmt.bindLong(7, entity.getArticle_like_count());
        stmt.bindLong(8, entity.getArticle_comment_count());
 
        String joke_user_nick = entity.getJoke_user_nick();
        if (joke_user_nick != null) {
            stmt.bindString(9, joke_user_nick);
        }
 
        String joke_user_icon = entity.getJoke_user_icon();
        if (joke_user_icon != null) {
            stmt.bindString(10, joke_user_icon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JokeBean readEntity(Cursor cursor, int offset) {
        JokeBean entity = new JokeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // jokeDaoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // joke_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // joke_user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getLong(offset + 5), // post_time
            cursor.getInt(offset + 6), // article_like_count
            cursor.getInt(offset + 7), // article_comment_count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // joke_user_nick
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // joke_user_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JokeBean entity, int offset) {
        entity.setJokeDaoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJoke_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJoke_user_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPost_time(cursor.getLong(offset + 5));
        entity.setArticle_like_count(cursor.getInt(offset + 6));
        entity.setArticle_comment_count(cursor.getInt(offset + 7));
        entity.setJoke_user_nick(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJoke_user_icon(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JokeBean entity, long rowId) {
        entity.setJokeDaoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JokeBean entity) {
        if(entity != null) {
            return entity.getJokeDaoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JokeBean entity) {
        return entity.getJokeDaoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
